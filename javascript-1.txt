// <Comment your JavaScript Code>

// javascript beginning
/*  First lesson
commenting */


// <Declare JavaScript Variables>
var myName;


// <Storing Values with the Assignment Operator>
var a;
var b = 2;

a=7;
b=a;


// <Initializing Variables with the Assignment Operator>
var a = 9;


// <Understanding Uninitialized Variables>
// without intialization, the variables are <em>undefined</em>

var a = 5;
var b = 10;
var c = "I am a";

a = a + 1;
b = b + 5;
c = c + " String!";


// <Understanding Case Sensitivity in Variables>
// camelCase
// Declarations
var studlyCapVar;
var properCamelCase;
var titleCaseOver;

// Assignments
studlyCapVar = 10;
properCamelCase = "A String";
titleCaseOver = 9000;


// <Add Two Numbers with JavaScript>
var sum = 10 + 10;


// <Subtract One Number from Another with JavaScript>
var difference = 45 - 33;


// <Multiply Two Numbers with JavaScript>
var product = 8 * 10;


// <Divide One Number by Another with JavaScript>
var quotient = 66 / 33;


// <Increment a Number with JavaScript>
myVar++;


// <Decrement a Number with JavaScript>
myVar--;


// <Create Decimal Numbers with JavaScript>
var myDecimal = 5.7;


// <Multiply Two Decimals with JavaScript>
var product = 2.0 * 2.5;


// <Divide one Decimal by Another with JavaScript>
var quotient = 4.4 / 2.0;


// <Finding a Remainder in JavaScript>
var remainder = 11 % 3;


// <Compound Assignment With Augmented Addition>
var a = 3;
var b = 17;
var c = 12;

a += 12;
b += 9;
c += 7;


// <Compound Assignment With Augmented Subtraction>
var a = 11;
var b = 9;
var c = 3;

a -= 6;
b -= 15;
c -= 1;


// <Compound Assignment With Augmented Multiplication>
var a = 5;
var b = 12;
var c = 4.6;

a *= 5;
b *= 3 ;
c *= 10;


// <Compound Assignment With Augmented Division>
var a = 48;
var b = 108;
var c = 33;

a /= 12;
b /= 4;
c /= 11;


// <Convert Celsius to Fahrenheit>

function convertToF(celsius) {
  var fahrenheit;  
  fahrenheit = ((celsius*9)/5)+32;
  return fahrenheit;
}
// Change the inputs below to test your code
convertToF(30);


// <Declare String Variables>
var myFirstName = "John";
var myLastName = "Doe"


// <Escaping Literal Quotes in Strings>
var myStr = "I am a \"double quoted\" string inside \"double quotes\".";


// <Quoting Strings with Single Quotes>
var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';


// <Escape Sequences in Strings>
var myStr = "FirstLine\n\\SecondLine\\\rThirdLine";
Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	backspace
\f	form feed


// <Concatenating Strings with Plus Operator>
var myStr = "This is the start. " + "This is the end.";


// <Concatenating Strings with the Plus Equals Operator>
var myStr = "This is the first sentence. ";
myStr += "This is the second sentence.";


// <Constructing Strings with Variables>
var myName = "John";
var myStr = "My name is " + myName + " and I am swell!";


// <Appending Variables to Strings>
var someAdjective = "awesome!";
var myStr = "Learning to code is ";
myStr += someAdjective;


// <Find the Length of a String>
var lastNameLength = 0;
var lastName = "Lovelace";

lastNameLength = lastName.length;


// <Use Bracket Notation to Find the First Character in a String>
var firstLetterOfLastName = "";
var lastName = "Lovelace";

firstLetterOfLastName = lastName[0];


// <Understand String Immutability>
var myStr = "Bob";
myStr[0] = "J";
does not work
var myStr = "Bob";
myStr = "Job";


// <Use Bracket Notation to Find the Nth Character in a String>
var lastName = "Lovelace";
var thirdLetterOfLastName = lastName[2];


// <Use Bracket Notation to Find the Last Character in a String>
var lastName = "Lovelace";
var lastLetterOfLastName = lastName[lastName.length - 1];


// <Use Bracket Notation to Find the NthtoLast Character in a String>
var lastName = "Lovelace";
var secondToLastLetterOfLastName = lastName[lastName.length - 2];


// <Word Blanks>

function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
  var result = "His ";
  result = result + myAdjective + " bald " + myNoun + " somehow " + myVerb + " really " + myAdverb + ".";
  return result;
}
// Change the words here to test your function
wordBlanks("dog", "big", "ran", "quickly");


// <Store Multiple Values in one Variable using JavaScript Arrays>
var myArray = ["Doe", 32];


// <Nest one Array within Another Array>
var myArray = [["First Name", 0], ["Last Name", 7]];


// <Access Array Data with Indexes>
var myArray = [1,2,3];
var myData = myArray[0];


// <Modify Array Data With Indexes>
var myArray = [1,2,3];
myArray[0] = 3;


// <Access MultiDimensional Arrays With Indexes>
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
// my Data should be 8.
var myData = myArray[2][1];


// <Manipulate Arrays With push>
var myArray = [["John", 23], ["cat", 2]];
myArray.push(["dog",3]);


// <Manipulate Arrays With pop>
var myArray = [["John", 23], ["cat", 2]];
var removedFromMyArray = myArray.pop();


// <Manipulate Arrays With shift>
var myArray = [["John", 23], ["dog", 3]];
var removedFromMyArray = myArray.shift();


// <Manipulate Arrays With unshift>
var myArray = [["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul",35]);


// <Shopping List>
var myList = [["Chocolate Bar", 15], ["Chips", 10], ["Cookies", 25], ["Bread", 20], ["Almonds", 5]];


// <Write Reusable JavaScript with Functions>
function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();


// <Passing Values to Functions with Arguments>
function functionWithArgs(a,b){
  console.log(a+b);
}
functionWithArgs(10, 5);


// <Global Scope and Functions>
// Variables which are used without the var keyword are automatically created in the global scope.
var myGlobal = 10;

function fun1() {
  oopsGlobal = 5;
}


// <Local Scope and Functions>
function myLocalScope() {
  'use strict';
  var myVar;
  
  console.log(myVar);
}
myLocalScope();

// myVar is not defined outside of myLocalScope
console.log(myVar);


// <Global vs Local Scope in Functions>
/*It is possible to have both local and global variables with the same name. 
When you do this, the local variable takes precedence over the global variable.*/

var outerWear = "T-Shirt";
function myOutfit() {
  var outerWear = "sweater";
  return outerWear;
}
myOutfit();


// <Return a Value from a Function with Return>
function timesFive(num) {
  return num * 5;
}


// <Assignment with a Returned Value>
var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

processed = processArg(7);


// <Stand in Line>
function nextInLine(arr, item) {
  arr.push(item);
  item = arr.shift();
  return item; 
}

var testArr = [1,2,3,4,5];

console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6)); // Modify this line to test
console.log("After: " + JSON.stringify(testArr));


// <Understanding Boolean Values>
function welcomeToBooleans() {
  return true;
}


// <Use Conditional Logic with If Statements>
function trueOrFalse(wasThatTrue) {
  if(wasThatTrue){
    return "Yes, that was true";
  }
  return "No, that was false";
}
trueOrFalse(true);


// <Comparison with the Equality Operator>
function testEqual(val) {
  if (val==12) {
    return "Equal";
  }
  return "Not Equal";
}
testEqual(10);


// <Comparison with the Strict Equality Operator>
/* 3 === 3   // true
   3 === '3' // false */
 
function testStrict(val) {
  if (val===7) {
    return "Equal";
  }
  return "Not Equal";
}
testStrict(10);


// <Comparison with the Inequality Operator>
/* Examples
1 != 2      // true
1 != "1"    // false
1 != '1'    // false
1 != true   // false
0 != false  // false */

function testNotEqual(val) {
  if (val!=99) {
    return "Not Equal";
  }
  return "Equal";
}
testNotEqual(10);


// <Comparison with the Strict Inequality Operator>
/* Examples
3 !== 3   // false
3 !== '3' // true
4 !== 3   // true  */

function testStrictNotEqual(val) {
  if (val!==17) {
    return "Not Equal";
  }
  return "Equal";
}
testStrictNotEqual(10);

 
// <Comparison with the Greater Than Operator>
/* Examples

 5 > 3   // true
 7 > '3' // true
 2 > 3   // false
'1' > 9  // false */

function testGreaterThan(val) {
  if (val>100) {
    return "Over 100";
  }
  if (val>10) {
    return "Over 10";
  }
  return "10 or Under";
}
testGreaterThan(10);


// <Comparison with the Greater Than Or Equal To Operator>
function testGreaterOrEqual(val) {
  if (val>=20) {
    return "20 or Over";
  }
  if (val>=10) {
    return "10 or Over";
  }
  return "9 or Under";
}
testGreaterOrEqual(10);


// <Comparison with the Less Than Operator>
function testLessThan(val) {
  if (val<25) {
    return "Under 25";
  }
  if (val<55) {
    return "Under 55";
  }
  return "55 or Over";
}
testLessThan(10);


// <Comparison with the Less Than Or Equal To Operator>
function testLessOrEqual(val) {
  if (val<=12) {
    return "Smaller Than or Equal to 12";
  }
  if (val<=24) {
    return "Smaller Than or Equal to 24";
  }
  return "25 or More";
}
testLessOrEqual(10);


// <Comparisons with the Logical And Operator>
function testLogicalAnd(val) {
  if (val<=50 && val>=25) {
      return "Yes";
  }
  return "No";
}
testLogicalAnd(10);


// <Comparisons with the Logical Or Operator>

function testLogicalOr(val) {
  if (val>20 || val<10) {
    return "Outside";
  }
  return "Inside";
}
testLogicalOr(15);


// <Introducing Else Statements>
function testElse(val) {
  var result = "";
  if (val > 5) {
    result = "Bigger than 5";
  } else {
    result = "5 or Smaller";
  }
  return result;
}
testElse(4);


// <Introducing Else If Statements>
function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else {
    return "Between 5 and 10";
  }
}
testElseIf(7);


// <Logical Order in If Else Statements>
function orderMyLogic(val) {
  if (val < 5) {
    return "Less than 5";
  } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}
orderMyLogic(7);


// <Chaining If Else Statements>

function testSize(num) {
  if(num<5){
    return "Tiny";
  } else if (num<10) {
    return "Small";
  } else if (num<15) {
    return "Medium";
  } else if (num<20) {
    return "Large";
  } else {
    return "Huge";
  }
}
testSize(7);


// <Golf Code>
function golfScore(par, strokes) {
  if(strokes==1) {
    return "Hole-in-one!";
  } else if (strokes <= par-2) {
    return "Eagle";
  } else if (strokes == par-1) {
    return "Birdie";
  } else if (strokes == par) {
    return "Par";
  } else if (strokes == par+1) {
    return "Bogey";
  } else if (strokes == par+2) {
    return "Double Bogey";
  }
  else{
    return "Go Home!";
  }
}
golfScore(5, 4);


// <Selecting from many options with Switch Statements>

function caseInSwitch(val) {
  var answer = "";
  switch(val) {
    case 1:
      answer = "alpha";
      break;
    case 2:
      answer = "beta";
      break;
    case 3:
      answer = "gamma";
      break;
    case 4:
      answer = "delta";
      break;
  }
  return answer;  
}
caseInSwitch(1);


// <Adding a default option in Switch statements>

function switchOfStuff(val) {
  var answer = "";
  switch(val) {
    case 'a':
      answer = "apple";
      break;
    case 'b':
      answer = "bird";
      break;
    case 'c':
      answer = "cat";
      break;
    default:
      answer = "stuff";
  }
  return answer;  
}
switchOfStuff(1);


// <Multiple Identical Options in Switch Statements>
function sequentialSizes(val) {
  var answer = "";
  switch(val){
    case 1:
    case 2:
    case 3:
      answer = "Low";
      break;
    case 4:
    case 5:
    case 6:
      answer = "Mid";
      break;
    case 7:
    case 8:
    case 9:
      answer = "High";
      break;
  }
  return answer;  
}
sequentialSizes(1);


// <Replacing If Else Chains with Switch>
function chainToSwitch(val) {
  var answer = "";
  switch(val) {
    case 'bob':
      answer = "Marley";
      break;
    case 42:
      answer = "The Answer";
      break;
    case 1:
      answer = "There is no #1";
      break;
    case 99:
      answer = "Missed me by this much!";
      break;
    case 7:
      answer = "Ate Nine";
      break;
  }
  return answer;  
}
chainToSwitch(7);


// <Returning Boolean Values from Functions>
function isLess(a, b) {
  return a<b;
}


// <Return Early Pattern for Functions>
function abTest(a, b) {
  if (a<0 || b<0) {
    return undefined;
  }
  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}


// <Counting Cards>

var count = 0;

function cc(card) {
  // Only change code below this line
  switch(card){
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++;
      break;
    case 10:
    case 'J':
    case 'Q':
    case 'K':
    case 'A':
      count--;
      break;
  }
  var decision;
  if(count>0){
    decision = "Bet";
  } else {
    decision = "Hold";
  }  
  return count + " " + decision;
}
cc(2); cc(3); cc(7); cc('K'); cc('A');


// <Build JavaScript Objects>
var myDog = {
  "name": "Tom",
  "legs": 4,
  "tails": 1,
  "friends": ["Jimmy"]
};


// <Accessing Objects Properties with the Dot Operator>
var testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};
var hatValue = testObj.hat;
var shirtValue = testObj.shirt;


// <Accessing Objects Properties with Bracket Notation>
var testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};
var entreeValue = testObj["an entree"];
var drinkValue = testObj["the drink"];


// <Accessing Objects Properties with Variables>
var testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};
var playerNumber = 16;
var player = testObj[playerNumber];


// <Updating Object Properties>
var myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["Free Code Camp Campers"]
};
myDog.name = "Happy Coder";


// <Add New Properties to a JavaScript Object>
var myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["Free Code Camp Campers"]
};
myDog.bark = "woof";


// <Delete Properties from a JavaScript Object>
var myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["Free Code Camp Campers"],
  "bark": "woof"
};
delete myDog.tails;


// <Using Objects for Lookups>

// Setup
function phoneticLookup(val) {
  var result = "";

  // Only change code below this line
  var lookup = {
    "alpha": "Adams",
    "bravo": "Boston",
    "charlie": "Chicago",
    "delta": "Denver",
    "echo": "Easy",
    "foxtrot": "Frank"
  };
  result = lookup[val];
  /*
  switch(val) {
    case "alpha": 
      result = "Adams";
      break;
    case "bravo": 
      result = "Boston";
      break;
    case "charlie": 
      result = "Chicago";
      break;
    case "delta": 
      result = "Denver";
      break;
    case "echo": 
      result = "Easy";
      break;
    case "foxtrot": 
      result = "Frank";
  }
  */
  // Only change code above this line
  return result;
}

// Change this value to test
phoneticLookup("charlie");


// <Testing Objects for Properties>
var myObj = {
  gift: "pony",
  pet: "kitten",
  bed: "sleigh"
};

function checkObj(checkProp) {
  var answer;
  if(myObj.hasOwnProperty(checkProp)) {
    answer = myObj[checkProp];
  } else {
    answer = "Not Found";
  }  
  return answer;
}
checkObj("gift");


// <Manipulating Complex Objects>

var myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [ 
      "CS", 
      "8T", 
      "LP" ],
    "gold": true
  },
  {
    "artist": "Billy Joel",
    "title": "Uptown Girl",
    "release_year": 1975,
    "formats": [ 
      "CS", 
      "8T", 
      "LP" ]
  }
];


// <Accessing Nested Objects>
var myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};
var gloveBoxContents = myStorage.car.inside["glove box"]; // Change this line


// <Accessing Nested Arrays>
var myPlants = [
  { 
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }  
];
var secondTree = myPlants[1].list[1];


// <Record Collection>

var collection = {
    "2548": {
      "album": "Slippery When Wet",
      "artist": "Bon Jovi",
      "tracks": [ 
        "Let It Rock", 
        "You Give Love a Bad Name" 
      ]
    },
    "2468": {
      "album": "1999",
      "artist": "Prince",
      "tracks": [ 
        "1999", 
        "Little Red Corvette" 
      ]
    },
    "1245": {
      "artist": "Robert Palmer",
      "tracks": [ ]
    },
    "5439": {
      "album": "ABBA Gold"
    }
};
// Keep a copy of the collection for tests
var collectionCopy = JSON.parse(JSON.stringify(collection));

function updateRecords(id, prop, value) {
  var emptyArray = [];
  if(value === ""){
    delete collection[id][prop];
  }else if(prop=="tracks"){
    if(!collection[id].hasOwnProperty(prop)){
      collection[id][prop] = emptyArray;
    }
    collection[id][prop].push(value);
  }
  else{
    collection[id][prop] = value;
  }
  
  return collection;
}

updateRecords(5439, "artist", "ABBA");


// <Iterate with JavaScript For Loops>
var myArray = [];
for (var i=1; i<6; i++){
  myArray.push(i);
}


// <Iterate Odd Numbers With a For Loop>
var myArray = [];

for (var i = 1; i<10; i+=2){
  myArray.push(i);
}


// <Count Backwards With a For Loop>
var myArray = [];

for (var i = 9; i>0; i -=2){
  myArray.push(i);
}


// <Iterate Through an Array with a For Loop>
var myArr = [ 2, 3, 4, 5, 6];
var total = 0;

for (var i=0; i<myArr.length; i++) {
  total += myArr[i];
}


// <Nesting For Loops>
function multiplyAll(arr) {
  var product = 1;
  for (var i=0; i<arr.length; i++){
    for(var j=0; j<arr[i].length; j++){
      product *= arr[i][j];
    }
  }
  return product;
}

// Modify values below to test your code
multiplyAll([[1,2],[3,4],[5,6,7]]);


// <Iterate with JavaScript While Loops>
var myArray = [];

var i=0;
while(i<5) {
  myArray.push(i);
  i++;
}


// <Profile Lookup>
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["Javascript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(firstName, prop){
  for (var i=0; i<contacts.length; i++) {
    if(contacts[i].firstName == firstName){
      if(contacts[i].hasOwnProperty(prop)){
        return contacts[i][prop];
      }
      else{
        return "No such property";
      } 
    }
  }
  return "No such contact";
}
lookUpProfile("Akira", "likes");


// <Generate Random Fractions with JavaScript>
function randomFraction() {
  return Math.random();
}


// <Generate Random Whole Numbers with JavaScript>
function randomWholeNum() {
  return Math.floor(Math.random()*10);
}


// <Generate Random Whole Numbers within a Range>
function randomRange(myMin, myMax) {
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
}
var myRandom = randomRange(5, 15);


// <Sift through Text with Regular Expressions>
var testString = "Ada Lovelace and Charles Babbage designed the first computer and the software that would have run on it.";

// Example
var expressionToGetSoftware = /software/gi;
var softwareCount = testString.match(expressionToGetSoftware).length;

var expression = /and/gi;

var andCount = testString.match(expression).length;


// <Find Numbers with Regular Expressions>
var testString = "There are 3 cats but 4 dogs.";
var expression = /\d+/g;  // Change this line

// This code counts the matches of expression in testString
var digitCount = testString.match(expression).length;


// <Find Whitespace with Regular Expressions>
var testString = "How many spaces are there in this sentence?";
var expression = /\s+/g;  // Change this line

// This code counts the matches of expression in testString
var spaceCount = testString.match(expression).length;


// <Invert Regular Expression Matches with JavaScript>
var testString = "How many non-space characters are there in this sentence?";
var expression = /\S/g;  // Change this line

// This code counts the matches of expression in testString
var nonSpaceCount = testString.match(expression).length;

/*You can invert any match by using the uppercase version of the regular expression selector.*/







